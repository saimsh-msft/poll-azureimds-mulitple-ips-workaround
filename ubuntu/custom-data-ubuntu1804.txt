#cloud-config

write_files:
    - owner: root:root
      path: /var/lib/cloud/scripts/per-boot/fix-vm-missing-secondary-ips
      permissions: '0700'
      content: |
        #!/usr/bin/env python3

        from ipaddress import IPv4Interface, IPv4Network
        import itertools
        import json
        import requests
        import subprocess
        import time

        # Expected total number of IPs (primary and secondary) for each nic (in order)
        EXPECTED_IPS_PER_NIC = [2]
        QUERY_PRIVATE_IPV4_ADDRS_RETRY_ATTEMPTS = 150
        QUERY_PRIVATE_IPv4_ADDRS_ATTEMPT_SLEEP_SECS = 5
        IMDS_NETWORK_METADATA_URL = 'http://169.254.169.254/metadata/instance/network?api-version=2019-11-01'
        AZURE_PLATFORM_IPV4_ADDR = '168.63.129.16'
        IMDS_IPV4_ADDR = '169.254.169.254'


        def eval_cmd_get_output(cmd, raises_exc=False):
            proc = subprocess.Popen(['/bin/bash', '-c', cmd], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            out, err = proc.communicate()
            if proc.returncode != 0 and raises_exc:
                raise Exception('Failed to run command: {0}'.format(cmd))
            return out


        def get_nic_names():
            out = eval_cmd_get_output(
                "ip -o link show | grep -vi 'lo.*loopback' | tr -d ':' | cut -d' ' -f2",
                raises_exc=True)
            return out.decode().splitlines()


        class NicMultipleIPAddressFixer(object):

            def __init__(self):
                self._nic_cfg = None
                self._private_ipv4_addrs = None
                self._subnet_addr = None

            @staticmethod
            def get_nic_cfg_from_imds(nic_num):
                resp = requests.get(IMDS_NETWORK_METADATA_URL, headers={'Metadata': 'true'})
                resp.raise_for_status()
                network_cfg = json.loads(resp.content)
                # return network_cfg['interface'][nic_num]['ipv4']['ipAddress']
                return network_cfg['interface'][nic_num]

            @staticmethod
            def get_private_ipv4_addrs_from_nic_cfg(nic_cfg):
                return [ ip['privateIpAddress'] for ip in nic_cfg['ipv4']['ipAddress'] ]

            @staticmethod
            def get_ipv4_subnet_from_nic_cfg(nic_cfg):
                subnet = nic_cfg['ipv4']['subnet'][0]
                return subnet['address'] + '/' + subnet['prefix']

            def wait_for_expected_private_ipv4_addrs_from_imds(self, nic_num, expected_ips):
                attempts = 0
                while attempts < QUERY_PRIVATE_IPV4_ADDRS_RETRY_ATTEMPTS:
                    try:
                        nic_cfg = self.get_nic_cfg_from_imds(nic_num)
                        private_ipv4_addrs = self.get_private_ipv4_addrs_from_nic_cfg(nic_cfg)

                        if len(private_ipv4_addrs) == expected_ips:
                            print(
                                'Successfully obtained all IPs of nic {0} from IMDS after {1} attempt/s.'
                                .format(nic_num, attempts + 1))
                            self._nic_cfg = nic_cfg
                            self._private_ipv4_addrs = private_ipv4_addrs
                            self._subnet_addr = self.get_ipv4_subnet_from_nic_cfg(nic_cfg)
                            print('IPs of nic {0}: {1}'.format(
                                nic_num, json.dumps(private_ipv4_addrs)))
                            return
                    except Exception:
                        pass
                    attempts += 1
                    time.sleep(QUERY_PRIVATE_IPv4_ADDRS_ATTEMPT_SLEEP_SECS)
                raise Exception(
                    'Warning: IMDS did not return the expected number of IPs (expected {0}) for nic #{1} in time. '
                    .format(expected_ips, nic_num))

            def apply_nic_private_ipv4_addrs_using_imds_metadata(self, nic_num, nic_name, expected_ips):
                self.wait_for_expected_private_ipv4_addrs_from_imds(nic_num, expected_ips)

                eval_cmd_get_output('ip -4 addr flush dev {0}'.format(nic_name))

                subnet = IPv4Network(self._subnet_addr)
                ipv4s = [IPv4Interface(ipv4addr + '/' + str(subnet.prefixlen)) for ipv4addr in self._private_ipv4_addrs]
                for ipv4 in ipv4s:
                    eval_cmd_get_output('ip -f inet addr add {0} brd {1} dev {2}'.format(
                        ipv4.with_prefixlen, subnet.broadcast_address, nic_name))

                subnet_gateway = next(subnet.hosts())
                primary_ipv4 = ipv4s[0].ip

                eval_cmd_get_output(
                    'ip route del default via {0} dev {1}'
                    .format(subnet_gateway, nic_name))
                eval_cmd_get_output(
                    'ip route add default via {0} dev {1} proto dhcp src {2} metric 100'
                    .format(subnet_gateway, nic_name, primary_ipv4))

                eval_cmd_get_output(
                    'ip route del {0} dev {1}'
                    .format(subnet.with_prefixlen, nic_name))
                eval_cmd_get_output(
                    'ip route add {0} dev {1} proto kernel scope link src {2}'
                    .format(subnet.with_prefixlen, nic_name, primary_ipv4))

                eval_cmd_get_output(
                    'ip route del {0} via {1} dev {2}'
                    .format(AZURE_PLATFORM_IPV4_ADDR, subnet_gateway, nic_name))
                eval_cmd_get_output(
                    'ip route add {0} via {1} dev {2} proto dhcp src {3} metric 100'
                    .format(AZURE_PLATFORM_IPV4_ADDR, subnet_gateway, nic_name, primary_ipv4))

                eval_cmd_get_output(
                    'ip route del {0} via {1} dev {2}'
                    .format(IMDS_IPV4_ADDR, subnet_gateway, nic_name))
                eval_cmd_get_output(
                    'ip route add {0} via {1} dev {2} proto dhcp src {3} metric 100'
                    .format(IMDS_IPV4_ADDR, subnet_gateway, nic_name, primary_ipv4))


        def main():
            nic_names = get_nic_names()

            for nic_num, nic_name, expected_ips in zip(range(len(EXPECTED_IPS_PER_NIC)), nic_names, EXPECTED_IPS_PER_NIC):
                fixer = NicMultipleIPAddressFixer()
                try:
                    fixer.apply_nic_private_ipv4_addrs_using_imds_metadata(nic_num, nic_name, expected_ips)
                except Exception as e:
                    print(e)


        if __name__ == '__main__':
            main()
